#!/usr/bin/env node

/**
 * Module dependencies.
 */


const formatMessage = require('../helpers/messages');
var app = require('../app');
var debug = require('debug')('cryptotrade:server');
var http = require('http');
const socket = require('socket.io')
const axios = require('axios');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);





/*socket,io
 *
 *
 *
 *
 *
 *
 * */
const io = socket(server);


io.on('connection', socket => {
  setInterval(() => {

    const url = "https://api.nomics.com/v1/currencies/ticker?key=873ae0cc86815e29c223f548bcae6cd5&ids=BTC,ETH,BNB,XRP,LINK,DOGE,USDT,USDC,BCH,LTC,ADA&interval=1d,30d&convert=USD&per-page=100&page=1"
    axios.get(url)
      .then(async (result) => {
        socket.emit('liveChat', result.data)

      })

      .catch(err => {
        socket.emit('liveError', 'Error Found')
      });
  }, 1000)

});
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/*
////emit to a single user
//     socket.emit('message',formatMessage('Admin', `Hello user ${socket.id}`));
//
// ////Broadcast to a single chat from the admin chat area
//     ///send to all user except the sender
//     socket.broadcast.emit('message', formatMessage('Admin','A new user just joined'));
//
//     //listen to user message and send
//     socket.on('userMessage',msg=>{
//       console.log(socket.id);
//       io.emit('message',formatMessage(msg.username,msg.text));
//     })
    ///user leaves a chat
    // socket.on('disconnect',()=>{
    //
    //   ///emit to all users
    //   io.emit('message',formatMessage('Admin','A user just left'));
    // });

    //socket

 */


/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}